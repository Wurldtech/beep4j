- verify call sequences on handler classes
  - for start type notifications, change state first, then notify handler
  - for end type notifications, first notify handler, then change state
  - ChannelHandler#channelCloseRequested is called a potentially a long time after 
    the CloseRequested state is attained; this could lead to problems (i.e. exceptions)
    when the application calls methods on Channel
    - solution 1: call ChannelHandler#channelCloseRequested immediately (i.e. before
                  all replies have been sent)
    - solution 2: an intermediate state that allows everything until the request is passed
                  to the handler

- exception handling on client classes (handlers)
  - SessionHandler, ChannelHandler, and ReplyHandler
  - allow handlers to throw any exception?
  - catch exceptions and
    - terminate session?
    - delegate back to the handlers? i.e. ChannelHandler#exceptionCaught?

- CloseChannelCallback vs. Future
  - Channel#close(:CloseChannelCallback):void
  - Channel#close():Future<Boolean>
  - additionally, ChannelHandler#channelClosed() is called whenever a channel is closed

- synchronization
  - currently, all external access to the session is synchronized
  - however, beep4j calls application code (handlers) while still holding
    the session monitor
  - this could lead to deadlock (depending on how the application is programmed)
  
- Channel
  - add state to channel?
  - Channel#setAttribute(name,value)

- logging
  - add context: remote peer address, ...

- introduce thread pool to provide inter channel asynchrony
  - receiving messages
    - channel receives messages synchronously
    - channel receives replies synchronously
  
    while (true) {
      waitForPromotion()
      ChannelBuffer buf = fetchBuffer()
      giveUpLead()
      processEvents(buf)
      follow()
    }
  
- SessionHandler
  - add method exceptionCaught?

- support Content-Transfer-Encoding: base64, (quoted-printable)
  
- general review of exception handling

- GenericSessionHandler -> SessionHandler
  - factory:ChannelHandlerFactory
  - advertisedProfiles:String[]

  - connectionEstablished registers profiles
  - channelStartRequested selects first supported profile according to list
  
  - maybe desired, wait for user feedback

  
- logging
  - net.sf.beep4j.transport: logging of transport layer events
  - net.sf.beep4j.transport.DATA: all data passing through the transport layer

- session message bus

  MessageBus
  +dispatchEvent(o:Object)

- sequence of message calls
  - first notify application
  - then do the real work
  - rational: the application knows about the event; 
  - e.g. before it is no longer possible to use a Channel 

- starting channel

  Session#startChannel
  ChannelHandler#channelOpened
  
- successfully closing channel Channel#close
  
  CloseChannelCallback#closeAccepted
  ChannelHandler#channelClosed
  channel state = <dead>
  unregister channel from session
  fire channel closed event

  
  
  