- synchronization
  - currently, all external access to the session is synchronized
  - however, beep4j calls application code (handlers) while still holding
    the session monitor
  - this could lead to deadlock (depending on how the application is programmed)

- exception handling on client classes (handlers)
  - SessionHandler, ChannelHandler, and ReplyHandler
  - allow handlers to throw any exception?
  - catch exceptions and
    - terminate session?
    - delegate back to the handlers?

- ChannelFilter
  - same as IoFilter in MINA
  - filter methods on Channel as well as ChannelHandler
  - allow implementation of cross-cutting concerns
  
- Channel
  - add state to channel?
  - Channel#setAttribute(name,value)

- ChannelHandler
  - messageReceived(msg:Object,handler:ResponseHandler)

- logging
  - add context: remote peer address, ...

- introduce thread pool to provide inter channel asynchrony
  - receiving messages
    - channel receives messages synchronously
    - channel receives replies synchronously
  
    while (true) {
      waitForPromotion()
      ChannelBuffer buf = fetchBuffer()
      giveUpLead()
      processEvents(buf)
      follow()
    }
  
- SessionHandler
  - add method startChannelFailed?
  - add method exceptionCaught?

- ChannelManagementProfile
  - how to handle close and close requests of channel 0
  - method ChannelManagementProfile#closeRequested?

- support Content-Transfer-Encoding: base64, (quoted-printable)
  
- general review of exception handling
    
- GenericSessionHandler -> SessionHandler
  - factory:ChannelHandlerFactory
  - advertisedProfiles:String[]

  - connectionEstablished registers profiles
  - channelStartRequested selects first supported profile according to list
  
  - maybe desired, wait for user feedback
